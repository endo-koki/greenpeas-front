import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

/** 0: default, 1: selected, 2: suggested, 3: excluded */
export type DateState = 0 | 1 | 2 | 3;
export interface allDateState {
  memMat: string[][];
  dateArr: DateState[];
  memList: string[];
  allDateList: string[];
}

const initialState: allDateState = {
  memMat: [],
  dateArr: [],
  memList: [],
  allDateList: [],
};

export const allDateSlice = createSlice({
  name: 'allDate',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // set functions
    setData: (state, action: PayloadAction<string[][]>) => {
      const rawMat: string[][] = action.payload;
      const memMat: string[][] = [];
      const allDateList: string[] = [];
      for (let i = 1; i < rawMat.length; i++) {
        const rawVec: string[] = rawMat[i];
        allDateList.push(rawVec[0]);
        memMat.push(rawVec.slice(1));
      }

      state.memMat = memMat;
      state.memList = rawMat[0].slice(1);
      state.allDateList = allDateList;
      state.dateArr = new Array(allDateList.length).fill(0);
    },
    /** idx をもらってその idx の dateArr 要素を select/deselect */
    includeDate: (state, action: PayloadAction<number>) => {
      const idx: number = action.payload;
      const currentValue: DateState = state.dateArr[idx];
      state.dateArr[idx] = currentValue === 1 ? 0 : 1;
    },
    excludeDate: (state, action: PayloadAction<number>) => {
      const idx: number = action.payload;
      const currentValue: DateState = state.dateArr[idx];
      state.dateArr[idx] = currentValue === 3 ? 0 : 3;
    },
    suggestDate: (state, action: PayloadAction<number>) => {
      const idx: number = action.payload;
      const currentValue: DateState = state.dateArr[idx];
      state.dateArr[idx] = currentValue === 1 ? 1 : 2;
    },
    clearSuggestion: (state) => {
      state.dateArr.forEach((val, idx) => {
        if (val === 2) {
          state.dateArr[idx] = 0;
        }
      });
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const {
  setData,
  includeDate,
  excludeDate,
  suggestDate,
  clearSuggestion,
} = allDateSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectMemMat = (state: RootState) => state.allDate.memMat;
export const selectDateArr = (state: RootState) => state.allDate.dateArr;
export const selectMemList = (state: RootState) => state.allDate.memList;
export const selectAllDateList = (state: RootState) =>
  state.allDate.allDateList;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default allDateSlice.reducer;
